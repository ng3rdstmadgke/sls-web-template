service: sls-web-template
frameworkVersion: '3'
custom:
  profile: ${file(./profile/${opt:stage}.yml)}

provider:
  name: aws
  runtime: provided
  stage: ${opt:stage, self:custom.profile.stage, "dev"}
  profile: ${self:custom.profile.awsProfile}
  region: ${self:custom.profile.awsRegion}
  deploymentBucket: ${self:custom.profile.deploymentBucket}
  vpc:
    securityGroupIds: ${self:custom.profile.securityGroupIds}
    subnetIds: ${self:custom.profile.subnetIds}
  environment:
    APP_NAME: ${self:service}
    STAGE_NAME: ${self:provider.stage}
  # APIGatewayでプライベートAPIを作成する
  # https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/apigateway-private-apis.html
  # Endpoint Type: https://www.serverless.com/framework/docs/providers/aws/events/apigateway#configuring-endpoint-types
  endpointType: PRIVATE
  vpcEndpointIds: 
    - ${self:custom.profile.vpcEndpointId}
  apiGateway:
    # バイナリファイルを返却できるようにする設定
    binaryMediaTypes:
      - '*/*'
    # VPCエンドポイント経由のリクエストのみを許可する設定
    # ResourcePolicy: https://www.serverless.com/framework/docs/providers/aws/events/apigateway#resource-policy
    resourcePolicy:
      - Effect: Deny
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*
        Condition:
          StringNotEquals:
            aws:sourceVpce: ${self:custom.profile.vpcEndpointId}
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource: "execute-api:/*"

# デプロイパッケージに含めるファイル/ディレクトリを指定
package:
  patterns:
    - '!**' # すべてのファイルをexclude
    - 'api/**' # fastapiのソースコードをinclude
    - 'front_dist/**' # nuxtのビルド青果物をinclude
    - '!**/__pycache__'

functions:
  api:
    image:
      uri: ${aws:accountId}.dkr.ecr.${self:provider.region}.amazonaws.com/${self:service}/lambda/${self:provider.stage}:${self:custom.profile.releaseTag}
    timeout: 29
    role: ApiRole
    events:
      - http:
          path: /
          method: ANY
          private: false
          cors: true
      - http:
          path: /{path+}
          method: ANY
          private: false
          cors: true
    environment: ${self:custom.profile.apiEnvironment}

# you can add CloudFormation resource templates here
resources:
  Resources:
    ApiRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: slsWebTemplate-apiRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole 
        Policies:
          - PolicyName: apiAppPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - "s3:*"
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - "dynamodb:*"
                    - "dax:*"